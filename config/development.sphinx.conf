indexer
{
}

searchd
{
  listen = 127.0.0.1:9306:mysql41
  log = /home/markovnin/www/isma/log/development.searchd.log
  query_log = /home/markovnin/www/isma/log/development.searchd.query.log
  pid_file = /home/markovnin/www/isma/log/development.sphinx.pid
  workers = threads
  binlog_path = /home/markovnin/www/isma/tmp/binlog/development
}

source article_core_0
{
  type = mysql
  sql_host = 10.0.3.118
  sql_user = markovnin
  sql_pass = I8Ar|%@9}Ke?
  sql_db = isma
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query_pre = SET NAMES utf8
  sql_query = SELECT SQL_NO_CACHE `articles`.`id` * 10 + 0 AS `id`, `articles`.`title` AS `title`, `articles`.`content` AS `content`, `articles`.`id` AS `sphinx_internal_id`, 'Article' AS `sphinx_internal_class`, 0 AS `sphinx_deleted` FROM `articles`  WHERE (`articles`.`id` BETWEEN $start AND $end) GROUP BY `articles`.`id`, `articles`.`title`, `articles`.`content`, `articles`.`id`  ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`articles`.`id`), 1), IFNULL(MAX(`articles`.`id`), 1) FROM `articles`
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_string = sphinx_internal_class
  sql_query_info = SELECT `articles`.* FROM `articles`  WHERE (`articles`.`id` = ($id - 0) / 10)
}

index article_core
{
  type = plain
  path = /home/markovnin/www/isma/db/sphinx/development/article_core
  docinfo = extern
  charset_type = utf-8
  source = article_core_0
}

source attachment_core_0
{
  type = mysql
  sql_host = 10.0.3.118
  sql_user = markovnin
  sql_pass = I8Ar|%@9}Ke?
  sql_db = isma
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query_pre = SET NAMES utf8
  sql_query = SELECT SQL_NO_CACHE `attachments`.`id` * 10 + 1 AS `id`, `attachments`.`title` AS `title`, `attachments`.`content` AS `content`, `attachments`.`id` AS `sphinx_internal_id`, 'Attachment' AS `sphinx_internal_class`, 0 AS `sphinx_deleted` FROM `attachments`  WHERE (`attachments`.`id` BETWEEN $start AND $end) GROUP BY `attachments`.`id`, `attachments`.`title`, `attachments`.`content`, `attachments`.`id`  ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`attachments`.`id`), 1), IFNULL(MAX(`attachments`.`id`), 1) FROM `attachments`
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_string = sphinx_internal_class
  sql_query_info = SELECT `attachments`.* FROM `attachments`  WHERE (`attachments`.`id` = ($id - 1) / 10)
}

index attachment_core
{
  type = plain
  path = /home/markovnin/www/isma/db/sphinx/development/attachment_core
  docinfo = extern
  charset_type = utf-8
  source = attachment_core_0
}

source division_core_0
{
  type = mysql
  sql_host = 10.0.3.118
  sql_user = markovnin
  sql_pass = I8Ar|%@9}Ke?
  sql_db = isma
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query_pre = SET NAMES utf8
  sql_query = SELECT SQL_NO_CACHE `divisions`.`id` * 10 + 2 AS `id`, `divisions`.`name` AS `name`, `divisions`.`address` AS `address`, `divisions`.`id` AS `sphinx_internal_id`, 'Division' AS `sphinx_internal_class`, 0 AS `sphinx_deleted` FROM `divisions`  WHERE (`divisions`.`id` BETWEEN $start AND $end) GROUP BY `divisions`.`id`, `divisions`.`name`, `divisions`.`address`, `divisions`.`id`  ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`divisions`.`id`), 1), IFNULL(MAX(`divisions`.`id`), 1) FROM `divisions`
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_string = sphinx_internal_class
  sql_query_info = SELECT `divisions`.* FROM `divisions`  WHERE (`divisions`.`id` = ($id - 2) / 10)
}

index division_core
{
  type = plain
  path = /home/markovnin/www/isma/db/sphinx/development/division_core
  docinfo = extern
  charset_type = utf-8
  source = division_core_0
}

source post_core_0
{
  type = mysql
  sql_host = 10.0.3.118
  sql_user = markovnin
  sql_pass = I8Ar|%@9}Ke?
  sql_db = isma
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query_pre = SET NAMES utf8
  sql_query = SELECT SQL_NO_CACHE `posts`.`id` * 10 + 3 AS `id`, `posts`.`name` AS `name`, `posts`.`id` AS `sphinx_internal_id`, 'Post' AS `sphinx_internal_class`, 0 AS `sphinx_deleted` FROM `posts`  WHERE (`posts`.`id` BETWEEN $start AND $end) GROUP BY `posts`.`id`, `posts`.`name`, `posts`.`id`  ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`posts`.`id`), 1), IFNULL(MAX(`posts`.`id`), 1) FROM `posts`
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_string = sphinx_internal_class
  sql_query_info = SELECT `posts`.* FROM `posts`  WHERE (`posts`.`id` = ($id - 3) / 10)
}

index post_core
{
  type = plain
  path = /home/markovnin/www/isma/db/sphinx/development/post_core
  docinfo = extern
  charset_type = utf-8
  source = post_core_0
}

source profile_core_0
{
  type = mysql
  sql_host = 10.0.3.118
  sql_user = markovnin
  sql_pass = I8Ar|%@9}Ke?
  sql_db = isma
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query_pre = SET NAMES utf8
  sql_query = SELECT SQL_NO_CACHE `profiles`.`id` * 10 + 4 AS `id`, `profiles`.`first_name` AS `first_name`, `profiles`.`middle_name` AS `middle_name`, `profiles`.`last_name` AS `last_name`, `profiles`.`about` AS `about`, `profiles`.`id` AS `sphinx_internal_id`, 'Profile' AS `sphinx_internal_class`, 0 AS `sphinx_deleted` FROM `profiles`  WHERE (`profiles`.`id` BETWEEN $start AND $end) GROUP BY `profiles`.`id`, `profiles`.`first_name`, `profiles`.`middle_name`, `profiles`.`last_name`, `profiles`.`about`, `profiles`.`id`  ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`profiles`.`id`), 1), IFNULL(MAX(`profiles`.`id`), 1) FROM `profiles`
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_string = sphinx_internal_class
  sql_query_info = SELECT `profiles`.* FROM `profiles`  WHERE (`profiles`.`id` = ($id - 4) / 10)
}

index profile_core
{
  type = plain
  path = /home/markovnin/www/isma/db/sphinx/development/profile_core
  docinfo = extern
  charset_type = utf-8
  source = profile_core_0
}

index article
{
  type = distributed
  local = article_core
}

index attachment
{
  type = distributed
  local = attachment_core
}

index division
{
  type = distributed
  local = division_core
}

index post
{
  type = distributed
  local = post_core
}

index profile
{
  type = distributed
  local = profile_core
}
